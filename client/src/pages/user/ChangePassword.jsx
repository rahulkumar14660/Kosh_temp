import React, { useContext, useState } from "react";import Sidebar from "../../components/layout/Sidebar";import "./ChangePassword.css";import axios from "axios";import { AuthContext } from "../../context/AuthContext";import { FiEye, FiEyeOff } from "react-icons/fi";const ChangePassword = () => {  const apiUrl = import.meta.env.VITE_API_URL;  const { user } = useContext(AuthContext);  const [isVerified, setIsVerified] = useState(false);  const [formData, setFormData] = useState({    currentPassword: "",    newPassword: "",    confirmPassword: "",    otp: "",  });  const [showPasswords, setShowPasswords] = useState({    current: false,    new: false,    confirm: false,  });  const [error, setError] = useState("");  const [success, setSuccess] = useState("");  const handleChange = (e) => {    setFormData({ ...formData, [e.target.name]: e.target.value });    setError("");    setSuccess("");  };  const togglePasswordVisibility = (field) => {    setShowPasswords((prev) => ({ ...prev, [field]: !prev[field] }));  };  const handleSubmit = async (e) => {    e.preventDefault();    setSuccess("Please wait...");    if (!isVerified) {      try {        const res = await axios.post(          `${apiUrl}/api/v1/auth/forgetPassOTP`,          { email: user.email, currentPassword: formData.currentPassword },          { withCredentials: true }        );        setSuccess("OTP sent to email");        setIsVerified(true);      } catch (err) {        if (err.response?.data?.message === "Otp already sent to email") {          setError("");          setSuccess("Please check your mail for OTP");          setIsVerified(true);        } else {          setSuccess("");          setError(err.response?.data?.message || "An error occurred");        }      }    } else {      if (formData.newPassword !== formData.confirmPassword) {        setSuccess("");        setError("New Password and Confirm Password don't match");        return;      }      try {        await axios.post(          `${apiUrl}/api/v1/auth/verifyForgetpassOTP`,          {            email: user.email,            otp: parseInt(formData.otp),            password: formData.newPassword,          },          { withCredentials: true }        );        setError("");        setSuccess("Password Changed Successfully");        setFormData({          currentPassword: "",          newPassword: "",          confirmPassword: "",          otp: "",        });        setIsVerified(false);      } catch (err) {        setSuccess("");        setError(err.response?.data?.message || "Something went wrong");      }    }  };  return (    <div className="change-password-container">      <Sidebar />      <main className="change-password-main">        <div className="change-password-card">          <h1>Change Password</h1>          <p className="instruction">Use a strong password with at least 8 characters, including numbers and symbols.</p>          <form onSubmit={handleSubmit} className="change-password-form">            <div className="form-group">              <label>Email</label>              <input type="text" value={user.email} disabled />            </div>            {!isVerified && (              <div className="form-group password-group">                <label htmlFor="currentPassword">Current Password</label>                <div className="password-wrapper">                  <input                    type={showPasswords.current ? "text" : "password"}                    required                    autoFocus                    name="currentPassword"                    id="currentPassword"                    placeholder="Enter current password"                    value={formData.currentPassword}                    onChange={handleChange}                  />                  <span onClick={() => togglePasswordVisibility("current")} className="toggle-password">                    {showPasswords.current ? <FiEyeOff /> : <FiEye />}                  </span>                </div>              </div>            )}            {isVerified && (              <>                <div className="form-group password-group">                  <label htmlFor="newPassword">New Password</label>                  <div className="password-wrapper">                    <input                      type={showPasswords.new ? "text" : "password"}                      required                      autoFocus                      name="newPassword"                      id="newPassword"                      placeholder="Enter new password"                      value={formData.newPassword}                      onChange={handleChange}                    />                    <span onClick={() => togglePasswordVisibility("new")} className="toggle-password">                      {showPasswords.new ? <FiEyeOff /> : <FiEye />}                    </span>                  </div>                </div>                <div className="form-group password-group">                  <label htmlFor="confirmPassword">Confirm New Password</label>                  <div className="password-wrapper">                    <input                      type={showPasswords.confirm ? "text" : "password"}                      required                      name="confirmPassword"                      id="confirmPassword"                      placeholder="Confirm new password"                      value={formData.confirmPassword}                      onChange={handleChange}                    />                    <span onClick={() => togglePasswordVisibility("confirm")} className="toggle-password">                      {showPasswords.confirm ? <FiEyeOff /> : <FiEye />}                    </span>                  </div>                </div>                <div className="form-group">                  <label htmlFor="otp">Enter OTP</label>                  <input type="number" required name="otp" id="otp" placeholder="Enter OTP" value={formData.otp} onChange={handleChange} />                </div>              </>            )}            {error && <p className="form-error">{error}</p>}            {success && <p className="form-success">{success}</p>}            <button type="submit" className="submit-button">              {isVerified ? "Update Password" : "Get OTP"}            </button>          </form>        </div>      </main>    </div>  );};export default ChangePassword;